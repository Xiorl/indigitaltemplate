<?php
/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * number_of_bedrooms = get_post_meta( get_the_ID(), 'property_details_number_of_bedrooms', true )
 * number_of_bathrooms = get_post_meta( get_the_ID(), 'property_details_number_of_bathrooms', true )
 * construction_meters = get_post_meta( get_the_ID(), 'property_details_construction_meters', true )
 * meters_of_the_land = get_post_meta( get_the_ID(), 'property_details_meters_of_the_land', true )
 * number_of_parking_spaces = get_post_meta( get_the_ID(), 'property_details_number_of_parking_spaces', true )
 * hallway_switch = get_post_meta( get_the_ID(), 'property_details_hallway_switch', true )
 * tv_room_switch = get_post_meta( get_the_ID(), 'property_details_tv_room_switch', true )
 * bathroom_dressing_room_switch = get_post_meta( get_the_ID(), 'property_details_bathroom_dressing_room_switch', true )
 * terrace_switch = get_post_meta( get_the_ID(), 'property_details_terrace_switch', true )
 * bar_area_switch = get_post_meta( get_the_ID(), 'property_details_bar_area_switch', true )
 * service_room_switch = get_post_meta( get_the_ID(), 'property_details_service_room_switch', true )
 * walkin_closet_switch = get_post_meta( get_the_ID(), 'property_details_walkin_closet_switch', true )
 * study_room_switch = get_post_meta( get_the_ID(), 'property_details_study_room_switch', true )
 * andining_room_switch = get_post_meta( get_the_ID(), 'property_details_andining_room_switch', true )
 * washing_area_switch = get_post_meta( get_the_ID(), 'property_details_washing_area_switch', true )
 * private_bathroom_switch = get_post_meta( get_the_ID(), 'property_details_private_bathroom_switch', true )
 * solar_heater_switch = get_post_meta( get_the_ID(), 'property_details_solar_heater_switch', true )
 * solar_panel_switch = get_post_meta( get_the_ID(), 'property_details_solar_panel_switch', true )
 * roof_washing_area_switch = get_post_meta( get_the_ID(), 'property_details_roof_washing_area_switch', true )
 * thrid_level_terrace_switch = get_post_meta( get_the_ID(), 'property_details_thrid_level_terrace_switch', true )
 * multiple_hall_switch = get_post_meta( get_the_ID(), 'property_details_multiple_hall_switch', true )
 * breakfast_area_switch = get_post_meta( get_the_ID(), 'property_details_breakfast_area_switch', true )
 * back_terrace_switch = get_post_meta( get_the_ID(), 'property_details_back_terrace_switch', true )
 * dinning_room_switch = get_post_meta( get_the_ID(), 'property_details_dinning_room_switch', true )
 * kitchen_switch = get_post_meta( get_the_ID(), 'property_details_kitchen_switch', true )
 * receiver_switch = get_post_meta( get_the_ID(), 'property_details_receiver_switch', true )
 * yard_switch = get_post_meta( get_the_ID(), 'property_details_yard_switch', true )
 * cellar_switch = get_post_meta( get_the_ID(), 'property_details_cellar_switch', true )
 * laundry_room_switch = get_post_meta( get_the_ID(), 'property_details_laundry_room_switch', true )
 * rooftop_laundry_area_switch = get_post_meta( get_the_ID(), 'property_details_rooftop_laundry_area_switch', true )
 * garden_terrace_switch = get_post_meta( get_the_ID(), 'property_details_garden_terrace_switch', true )
 * balcony_switch = get_post_meta( get_the_ID(), 'property_details_balcony_switch', true )
 * full_bathroom_switch = get_post_meta( get_the_ID(), 'property_details_full_bathroom_switch', true )
 */
class property_details {
	private $config = '{"title":"property_details","prefix":"property_details_","domain":"property_details","class_name":"property_details","post-type":["modelos"],"context":"normal","priority":"low","fields":[{"type":"text","label":"number_of_bedrooms","id":"property_details_number_of_bedrooms"},{"type":"text","label":"number_of_bathrooms","id":"property_details_number_of_bathrooms"},{"type":"text","label":"construction_meters","id":"property_details_construction_meters"},{"type":"text","label":"meters_of_the_land","id":"property_details_meters_of_the_land"},{"type":"text","label":"number_of_parking_spaces","id":"property_details_number_of_parking_spaces"},{"type":"checkbox","label":"hallway_switch","description":"Pasillo","id":"property_details_hallway_switch"},{"type":"checkbox","label":"tv_room_switch","description":"Sala tv","id":"property_details_tv_room_switch"},{"type":"checkbox","label":"bathroom_dressing_room_switch","description":"Ba\u00f1o vestidor","id":"property_details_bathroom_dressing_room_switch"},{"type":"checkbox","label":"terrace_switch","description":"Terraza","id":"property_details_terrace_switch"},{"type":"checkbox","label":"bar_area_switch","description":"\u00c1rea bar","id":"property_details_bar_area_switch"},{"type":"checkbox","label":"service_room_switch","description":"Cuarto de servicio","id":"property_details_service_room_switch"},{"type":"checkbox","label":"walkin_closet_switch","description":"Closet vestidor","id":"property_details_walkin_closet_switch"},{"type":"checkbox","label":"study_room_switch","description":"Sala de estudio","id":"property_details_study_room_switch"},{"type":"checkbox","label":"andining_room_switch","description":"Ancomedor","id":"property_details_andining_room_switch"},{"type":"checkbox","label":"washing_area_switch","description":"\u00c1rea de lavado","id":"property_details_washing_area_switch"},{"type":"checkbox","label":"private_bathroom_switch","description":"Ba\u00f1o privado","id":"property_details_private_bathroom_switch"},{"type":"checkbox","label":"solar_heater_switch","description":"Calentador solar","id":"property_details_solar_heater_switch"},{"type":"checkbox","label":"solar_panel_switch","description":"Panel solar","id":"property_details_solar_panel_switch"},{"type":"checkbox","label":"roof_washing_area_switch","description":"\u00c1rea de lavado techado","id":"property_details_roof_washing_area_switch"},{"type":"checkbox","label":"thrid_level_terrace_switch","description":"3er nivel terraza","id":"property_details_thrid_level_terrace_switch"},{"type":"checkbox","label":"multiple_hall_switch","description":"Sal\u00f3n m\u00faltiples","id":"property_details_multiple_hall_switch"},{"type":"checkbox","label":"breakfast_area_switch","description":"Desayunador","id":"property_details_breakfast_area_switch"},{"type":"checkbox","label":"back_terrace_switch","description":"Terraza posterior","id":"property_details_back_terrace_switch"},{"type":"checkbox","label":"dinning_room_switch","description":"Comedor","id":"property_details_dinning_room_switch"},{"type":"checkbox","label":"kitchen_switch","description":"Cocina","id":"property_details_kitchen_switch"},{"type":"checkbox","label":"receiver_switch","description":"Recibidor","id":"property_details_receiver_switch"},{"type":"checkbox","label":"yard_switch","description":"Patio","id":"property_details_yard_switch"},{"type":"checkbox","label":"cellar_switch","description":"Bodega","id":"property_details_cellar_switch"},{"type":"checkbox","label":"laundry_room_switch","description":"Cuarto de lavado","id":"property_details_laundry_room_switch"},{"type":"checkbox","label":"rooftop_laundry_area_switch","description":"\u00c1rea de lavado techada en azotea","id":"property_details_rooftop_laundry_area_switch"},{"type":"checkbox","label":"garden_terrace_switch","description":"Terraza jard\u00edn","id":"property_details_garden_terrace_switch"},{"type":"checkbox","label":"balcony_switch","description":"Balc\u00f3n","id":"property_details_balcony_switch"},{"type":"checkbox","label":"full_bathroom_switch","description":"Ba\u00f1o completo en planta baja","id":"property_details_full_bathroom_switch"}]}';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'admin_head', [ $this, 'admin_head' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function admin_head() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			?><?php
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				case 'checkbox':
					update_post_meta( $post_id, $field['id'], isset( $_POST[ $field['id'] ] ) ? $_POST[ $field['id'] ] : '' );
					break;
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		$this->fields_table();
	}

	private function fields_table() {
		?><table class="form-table" role="presentation">
			<tbody><?php
				foreach ( $this->config['fields'] as $field ) {
					?><tr>
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
					</tr><?php
				}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			case 'checkbox':
				$this->checkbox( $field );
				break;
			default:
				$this->input( $field );
		}
	}

	private function checkbox( $field ) {
		printf(
			'<label class="rwp-checkbox-label"><input %s id="%s" name="%s" type="checkbox"> %s</label>',
			$this->checked( $field ),
			$field['id'], $field['id'],
			isset( $field['description'] ) ? $field['description'] : ''
		);
	}

	private function input( $field ) {
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

	private function checked( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
			if ( $value === 'on' ) {
				return 'checked';
			}
			return '';
		} else if ( isset( $field['checked'] ) ) {
			return 'checked';
		}
		return '';
	}
}
new property_details;

?>